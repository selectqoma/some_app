image: scratch

stages:
  - build
  - test
  - publish
  - registry

.build-container: &build-container
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker-build
  variables:
    TARGET: UNKNOWN
    DOCKERFILE: UNKNOWN
    FOLDER: UNKNOWN
    DOCKER_ARGS: ""
  script:
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - echo "Building target '$TARGET' image to $CI_REGISTRY_IMAGE/$TARGET"
    - docker pull $CI_REGISTRY_IMAGE/${TARGET} || echo "No upstream image to cache from, will have to build a new one from scratch" || echo "Building new one from scratch" && export USE_CACHE="no"
    - export DOCKER_OPTS="--force-rm=true --compress=true"
    - '[[ "${USE_CACHE}" == "yes" ]] && export DOCKER_OPTS="${DOCKER_OPTS} --cache-from $CI_REGISTRY_IMAGE/${TARGET}" || export DOCKER_OPTS="${DOCKER_OPTS} --no-cache=true"'
    - echo "Executing 'docker build ${DOCKER_OPTS} ${DOCKER_ARGS} -t ${TARGET} -f ${FOLDER}/${DOCKERFILE} .'"
    - DEBIAN_FRONTEND=noninteractive docker build ${DOCKER_OPTS} ${DOCKER_ARGS} -t ${TARGET} -f ${FOLDER}/${DOCKERFILE} .
    - docker tag ${TARGET} ${CI_REGISTRY_IMAGE}/${TARGET}
    - docker push ${CI_REGISTRY_IMAGE}/${TARGET}

.publish: &publish
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker-build
  dependencies: []
  variables:
    BASE_IMAGE: ""
    CURRENT_TAG: ""
    NEW_TAG: ""
  script:
    - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY}"
    - docker pull "${CI_REGISTRY_IMAGE}/${BASE_IMAGE}:${CURRENT_TAG}"
    - docker tag "${CI_REGISTRY_IMAGE}/${BASE_IMAGE}:${CURRENT_TAG}" "${CI_REGISTRY_IMAGE}/${BASE_IMAGE}:${NEW_TAG}"
    - docker push "${CI_REGISTRY_IMAGE}/${BASE_IMAGE}:${NEW_TAG}"

build:
  <<: *build-container
  stage: build
  variables:
    TARGET: "base_focal_x64:${CI_COMMIT_SHORT_SHA}"
    FOLDER: "docker/base_focal_x64"
    DOCKERFILE: "Dockerfile"
    DOCKER_ARGS: ""

test:
  stage: test
  dependencies:
    - build
  tags:
    - linux
  image: "${CI_REGISTRY_IMAGE}/base_focal_x64:${CI_COMMIT_SHORT_SHA}"
  script:
    - echo 'Running tests'
    - source /opt/ros/noetic/setup.bash
    - cd /home/kpv/catkin_ws
    - catkin build
    - source /home/kpv/catkin_ws/devel/setup.bash
    - catkin run_tests --no-deps smelter_monitoring -DPYTHON_EXECUTABLE=/usr/bin/python3
    - catkin_test_results --verbose .

latest:
  <<: *publish
  stage: publish
  dependencies:
    - test
  variables:
    BASE_IMAGE: "base_focal_x64"
    CURRENT_TAG: "${CI_COMMIT_SHORT_SHA}"
    NEW_TAG: "${CI_JOB_NAME}"
  only:
    - master

tag:
  <<: *publish
  stage: publish
  dependencies:
    - test
  variables:
    BASE_IMAGE: "base_focal_x64"
    CURRENT_TAG: "${CI_COMMIT_SHORT_SHA}"
    NEW_TAG: "${CI_COMMIT_TAG}"
  only:
    - tags

registry:
  stage: registry
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker-build
  dependencies:
    - latest
  variables:
    LOCAL_REGISTRY_IMAGE: "registry.gitlab.com/kapernikov/continuous_improvement/local-docker-registry/amd64"
    SMELTER_REGISTRY_IMAGE: "registry.gitlab.com/kapernikov/umicore/smelter-monitoring/local-docker-registry/amd64"
    TARGET: "base_focal_x64:latest"
  script:
    - echo 'Pulling latest image'
    - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY}"
    - docker pull "${CI_REGISTRY_IMAGE}/${TARGET}"
    - echo "Creating local docker registry of smelter-monitoring application"
    - docker run -d --rm -p 5000:5000 --name "local-docker-registry" "${LOCAL_REGISTRY_IMAGE}"
    - docker tag "${CI_REGISTRY_IMAGE}/${TARGET}" "localhost:5000/smelter-monitoring/${TARGET}"
    - docker push "localhost:5000/smelter-monitoring/${TARGET}"
    - docker commit "local-docker-registry" "${SMELTER_REGISTRY_IMAGE}"
    - docker push "${SMELTER_REGISTRY_IMAGE}"
  only:
    - master
